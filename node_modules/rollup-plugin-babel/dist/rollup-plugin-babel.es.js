import { dirname, join } from 'path';
import { buildExternalHelpers, transform } from '@babel/core';
import { createFilter } from 'rollup-pluginutils';
import { addNamed } from '@babel/helper-module-imports';

var INLINE = {};
var RUNTIME = {};
var EXTERNAL = {};

// NOTE: DO NOT REMOVE the null character `\0` as it may be used by other plugins
// e.g. https://github.com/rollup/rollup-plugin-node-resolve/blob/313a3e32f432f9eb18cc4c231cc7aac6df317a51/src/index.js#L74
var HELPERS = '\0rollupPluginBabelHelpers';

function fallbackClassTransform () {
	return {
		visitor: {
			ClassDeclaration: function ClassDeclaration (path$$1, state) {
				path$$1.replaceWith(path$$1, state.file.addHelper('inherits'));
			}
		}
	};
}

var preflightCheckResults = {};

function preflightCheck ( options, dir ) {
	if ( !preflightCheckResults[ dir ] ) {
		var helpers;

		options = Object.assign( {}, options );
		delete options.only;
		delete options.ignore;

		options.filename = join( dir, 'x.js' );

		var inputCode = 'class Foo extends Bar {};\nexport default Foo;';
		var check = transform( inputCode, options ).code;

		if ( ~check.indexOf('class ') ) {
			options.plugins = (options.plugins || []).concat( fallbackClassTransform );
			check = transform( inputCode, options ).code;
		}

		if ( ~check.indexOf( 'import _inherits' ) ) { helpers = RUNTIME; }
		else if ( ~check.indexOf( 'function _inherits' ) ) { helpers = INLINE; }
		else if ( ~check.indexOf( 'babelHelpers' ) ) { helpers = EXTERNAL; }
		else {
			throw new Error( 'An unexpected situation arose. Please raise an issue at https://github.com/rollup/rollup-plugin-babel/issues. Thanks!' );
		}

		if (
			!~check.indexOf( 'export default' ) &&
			!~check.indexOf( 'export default Foo' ) &&
			!~check.indexOf( 'export { Foo as default }' )
		) { throw new Error( 'It looks like your Babel configuration specifies a module transformer. Please disable it. See https://github.com/rollup/rollup-plugin-babel#configuring-babel for more information' ); }

		preflightCheckResults[ dir ] = helpers;
	}

	return preflightCheckResults[ dir ];
}

function importHelperPlugin () {
	return {
		pre: function pre (file) {
			var cachedHelpers = {};
			file.set('helperGenerator', function (name) {
				if (cachedHelpers[name]) {
					return cachedHelpers[name];
				}
				return (cachedHelpers[name] = addNamed(file.path, name, HELPERS));
			});
		},
	};
}

var warned = {};
function warnOnce ( warn, msg ) {
	if ( warned[ msg ] ) { return; }
	warned[ msg ] = true;
	warn( msg );
}

function babel ( options ) {
	options = Object.assign( {}, options || {} );

	var filter = createFilter( options.include, options.exclude );
	delete options.include;
	delete options.exclude;

	if ( options.sourceMap !== false ) { options.sourceMaps = true; }
	if ( options.sourceMaps !== false ) { options.sourceMaps = true; }
	delete options.sourceMap;

	var runtimeHelpers = options.runtimeHelpers;
	delete options.runtimeHelpers;

	var externalHelpers;
	if ( options.externalHelpers ) { externalHelpers = true; }
	delete options.externalHelpers;

	var externalHelpersWhitelist = null;
	if ( options.externalHelpersWhitelist ) { externalHelpersWhitelist = options.externalHelpersWhitelist; }
	delete options.externalHelpersWhitelist;

	var warn = function (msg) { return console.warn(msg); }; // eslint-disable-line no-console

	return {
		name: 'babel',

		options: function options ( options$1 ) {
			warn = options$1.onwarn || warn;
		},

		resolveId: function resolveId ( id ) {
			if ( id === HELPERS ) { return id; }
		},

		load: function load ( id ) {
			if ( id !== HELPERS ) {
				return;
			}

			return buildExternalHelpers( externalHelpersWhitelist, 'module' );
		},

		transform: function transform$1 ( code, id ) {
			if ( !filter( id ) ) { return null; }
			if ( id === HELPERS ) { return null; }

			var helpers = preflightCheck( options, dirname( id ) );

			if ( helpers === EXTERNAL && !externalHelpers ) {
				warnOnce( warn, 'Using "external-helpers" plugin with rollup-plugin-babel is deprecated, as it now automatically deduplicates your Babel helpers.' );
			} else if ( helpers === RUNTIME && !runtimeHelpers ) {
				throw new Error( 'Runtime helpers are not enabled. Either exclude the transform-runtime Babel plugin or pass the `runtimeHelpers: true` option. See https://github.com/rollup/rollup-plugin-babel#configuring-babel for more information' );
			}

			var localOpts = Object.assign({ filename: id }, options);

			if ( helpers !== RUNTIME ) {
				localOpts = Object.assign({}, localOpts, { plugins: (localOpts.plugins || []).concat(importHelperPlugin) });
			}

			var transformed = transform( code, localOpts );

			if (!transformed) {
				return { code: code };
			}

			return {
				code: transformed.code,
				map: transformed.map
			};
		}
	};
}

export default babel;
//# sourceMappingURL=rollup-plugin-babel.es.js.map
